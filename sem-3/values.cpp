#include <iostream>

int main() {
  /*
    lvalue - объект, который занимает некоторую область памяти,
            у него есть имя, и он продолжает существовать после
            завершения выражения, где он использовался.
            Мы можем взять адрес lvalue и изменить его содержимое.

    rvalue - временное значение, которое не занимает фиксированную область памяти
            и существует только в текущем выражении.
            Мы не можем взять адрес rvalue,
            и оно не может быть использовано как lvalue.
  */

  // // Примеры lvalue
  // int x = 10;  // x — это lvalue
  // std::cout << "Это x: " << x << std::endl;

  // x = 20 + 1;  // x можно присваивать новое значение
  // std::cout << "Это тот же x: " << x << std::endl;

  // int* ptr = &x;  // Мы можем взять адрес lvalue
  // std::cout << "Это адрес x: " << ptr << std::endl;

  // Примеры rvalue
  int x = 5 + 10;  // Выражение (5 + 10) — это rvalue
  int z = 30;      // 30 — это rvalue

  // А вот так уже нельзя. Хотя это и логично, что нельзя
  5 = x;  // Ошибка, rvalue не может быть слева

  return 0;
}